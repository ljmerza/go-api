// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: query.sql

package userstore

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :execrows
INSERT INTO org_user (user_id, user_extl_id, username, org_id, person_profile_id, create_app_id, create_user_id,
                      create_timestamp, update_app_id, update_user_id, update_timestamp)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
`

type CreateUserParams struct {
	UserID          uuid.UUID
	UserExtlID      string
	Username        string
	OrgID           uuid.UUID
	PersonProfileID uuid.UUID
	CreateAppID     uuid.UUID
	CreateUserID    uuid.NullUUID
	CreateTimestamp time.Time
	UpdateAppID     uuid.UUID
	UpdateUserID    uuid.NullUUID
	UpdateTimestamp time.Time
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	result, err := q.db.Exec(ctx, createUser,
		arg.UserID,
		arg.UserExtlID,
		arg.Username,
		arg.OrgID,
		arg.PersonProfileID,
		arg.CreateAppID,
		arg.CreateUserID,
		arg.CreateTimestamp,
		arg.UpdateAppID,
		arg.UpdateUserID,
		arg.UpdateTimestamp,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const deleteUser = `-- name: DeleteUser :execrows
DELETE
FROM org_user
WHERE user_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userID uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteUser, userID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const findUserByExternalID = `-- name: FindUserByExternalID :one
SELECT u.user_id,
       u.user_extl_id,
       u.username,
       u.org_id,
       o.org_extl_id,
       o.org_name,
       o.org_description,
       u.person_profile_id,
       pp.name_prefix,
       pp.first_name,
       pp.middle_name,
       pp.last_name,
       pp.name_suffix,
       pp.nickname,
       pp.company_name,
       pp.company_dept,
       pp.job_title,
       pp.birth_date,
       pp.birth_year,
       pp.birth_month,
       pp.birth_day,
       pp.language_id,
       p.person_id
FROM org_user u
         inner join org o on o.org_id = u.org_id
         inner join person_profile pp on pp.person_profile_id = u.person_profile_id
         inner join person p on p.person_id = pp.person_id
WHERE u.user_extl_id = $1
`

type FindUserByExternalIDRow struct {
	UserID          uuid.UUID
	UserExtlID      string
	Username        string
	OrgID           uuid.UUID
	OrgExtlID       string
	OrgName         string
	OrgDescription  string
	PersonProfileID uuid.UUID
	NamePrefix      sql.NullString
	FirstName       string
	MiddleName      sql.NullString
	LastName        string
	NameSuffix      sql.NullString
	Nickname        sql.NullString
	CompanyName     sql.NullString
	CompanyDept     sql.NullString
	JobTitle        sql.NullString
	BirthDate       sql.NullTime
	BirthYear       sql.NullInt64
	BirthMonth      sql.NullInt64
	BirthDay        sql.NullInt64
	LanguageID      uuid.NullUUID
	PersonID        uuid.UUID
}

func (q *Queries) FindUserByExternalID(ctx context.Context, userExtlID string) (FindUserByExternalIDRow, error) {
	row := q.db.QueryRow(ctx, findUserByExternalID, userExtlID)
	var i FindUserByExternalIDRow
	err := row.Scan(
		&i.UserID,
		&i.UserExtlID,
		&i.Username,
		&i.OrgID,
		&i.OrgExtlID,
		&i.OrgName,
		&i.OrgDescription,
		&i.PersonProfileID,
		&i.NamePrefix,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.NameSuffix,
		&i.Nickname,
		&i.CompanyName,
		&i.CompanyDept,
		&i.JobTitle,
		&i.BirthDate,
		&i.BirthYear,
		&i.BirthMonth,
		&i.BirthDay,
		&i.LanguageID,
		&i.PersonID,
	)
	return i, err
}

const findUserByID = `-- name: FindUserByID :one
SELECT u.user_id,
       u.user_extl_id,
       u.username,
       u.org_id,
       o.org_extl_id,
       o.org_name,
       o.org_description,
       u.person_profile_id,
       pp.name_prefix,
       pp.first_name,
       pp.middle_name,
       pp.last_name,
       pp.name_suffix,
       pp.nickname,
       pp.company_name,
       pp.company_dept,
       pp.job_title,
       pp.birth_date,
       pp.birth_year,
       pp.birth_month,
       pp.birth_day,
       pp.language_id,
       p.person_id
FROM org_user u
         inner join org o on o.org_id = u.org_id
         inner join person_profile pp on pp.person_profile_id = u.person_profile_id
         inner join person p on p.person_id = pp.person_id
WHERE u.user_id = $1
`

type FindUserByIDRow struct {
	UserID          uuid.UUID
	UserExtlID      string
	Username        string
	OrgID           uuid.UUID
	OrgExtlID       string
	OrgName         string
	OrgDescription  string
	PersonProfileID uuid.UUID
	NamePrefix      sql.NullString
	FirstName       string
	MiddleName      sql.NullString
	LastName        string
	NameSuffix      sql.NullString
	Nickname        sql.NullString
	CompanyName     sql.NullString
	CompanyDept     sql.NullString
	JobTitle        sql.NullString
	BirthDate       sql.NullTime
	BirthYear       sql.NullInt64
	BirthMonth      sql.NullInt64
	BirthDay        sql.NullInt64
	LanguageID      uuid.NullUUID
	PersonID        uuid.UUID
}

func (q *Queries) FindUserByID(ctx context.Context, userID uuid.UUID) (FindUserByIDRow, error) {
	row := q.db.QueryRow(ctx, findUserByID, userID)
	var i FindUserByIDRow
	err := row.Scan(
		&i.UserID,
		&i.UserExtlID,
		&i.Username,
		&i.OrgID,
		&i.OrgExtlID,
		&i.OrgName,
		&i.OrgDescription,
		&i.PersonProfileID,
		&i.NamePrefix,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.NameSuffix,
		&i.Nickname,
		&i.CompanyName,
		&i.CompanyDept,
		&i.JobTitle,
		&i.BirthDate,
		&i.BirthYear,
		&i.BirthMonth,
		&i.BirthDay,
		&i.LanguageID,
		&i.PersonID,
	)
	return i, err
}

const findUserByUsername = `-- name: FindUserByUsername :one
SELECT u.user_id,
       u.user_extl_id,
       u.username,
       u.org_id,
       o.org_extl_id,
       o.org_name,
       o.org_description,
       u.person_profile_id,
       pp.name_prefix,
       pp.first_name,
       pp.middle_name,
       pp.last_name,
       pp.name_suffix,
       pp.nickname,
       pp.company_name,
       pp.company_dept,
       pp.job_title,
       pp.birth_date,
       pp.birth_year,
       pp.birth_month,
       pp.birth_day,
       pp.language_id,
       p.person_id
FROM org_user u
         inner join org o on o.org_id = u.org_id
         inner join person_profile pp on pp.person_profile_id = u.person_profile_id
         inner join person p on p.person_id = pp.person_id
WHERE u.username = $1
  AND u.org_id = $2
`

type FindUserByUsernameParams struct {
	Username string
	OrgID    uuid.UUID
}

type FindUserByUsernameRow struct {
	UserID          uuid.UUID
	UserExtlID      string
	Username        string
	OrgID           uuid.UUID
	OrgExtlID       string
	OrgName         string
	OrgDescription  string
	PersonProfileID uuid.UUID
	NamePrefix      sql.NullString
	FirstName       string
	MiddleName      sql.NullString
	LastName        string
	NameSuffix      sql.NullString
	Nickname        sql.NullString
	CompanyName     sql.NullString
	CompanyDept     sql.NullString
	JobTitle        sql.NullString
	BirthDate       sql.NullTime
	BirthYear       sql.NullInt64
	BirthMonth      sql.NullInt64
	BirthDay        sql.NullInt64
	LanguageID      uuid.NullUUID
	PersonID        uuid.UUID
}

func (q *Queries) FindUserByUsername(ctx context.Context, arg FindUserByUsernameParams) (FindUserByUsernameRow, error) {
	row := q.db.QueryRow(ctx, findUserByUsername, arg.Username, arg.OrgID)
	var i FindUserByUsernameRow
	err := row.Scan(
		&i.UserID,
		&i.UserExtlID,
		&i.Username,
		&i.OrgID,
		&i.OrgExtlID,
		&i.OrgName,
		&i.OrgDescription,
		&i.PersonProfileID,
		&i.NamePrefix,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.NameSuffix,
		&i.Nickname,
		&i.CompanyName,
		&i.CompanyDept,
		&i.JobTitle,
		&i.BirthDate,
		&i.BirthYear,
		&i.BirthMonth,
		&i.BirthDay,
		&i.LanguageID,
		&i.PersonID,
	)
	return i, err
}
