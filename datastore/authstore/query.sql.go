// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: query.sql

package authstore

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createPermission = `-- name: CreatePermission :execrows
insert into permission (permission_id, permission_extl_id, resource, operation, permission_description, active, create_app_id,
                        create_user_id, create_timestamp, update_app_id, update_user_id, update_timestamp)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
`

type CreatePermissionParams struct {
	PermissionID          uuid.UUID
	PermissionExtlID      string
	Resource              string
	Operation             string
	PermissionDescription string
	Active                bool
	CreateAppID           uuid.UUID
	CreateUserID          uuid.NullUUID
	CreateTimestamp       time.Time
	UpdateAppID           uuid.UUID
	UpdateUserID          uuid.NullUUID
	UpdateTimestamp       time.Time
}

func (q *Queries) CreatePermission(ctx context.Context, arg CreatePermissionParams) (int64, error) {
	result, err := q.db.Exec(ctx, createPermission,
		arg.PermissionID,
		arg.PermissionExtlID,
		arg.Resource,
		arg.Operation,
		arg.PermissionDescription,
		arg.Active,
		arg.CreateAppID,
		arg.CreateUserID,
		arg.CreateTimestamp,
		arg.UpdateAppID,
		arg.UpdateUserID,
		arg.UpdateTimestamp,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const createRole = `-- name: CreateRole :execrows
insert into role (role_id, role_extl_id, role_cd, role_description, active, create_app_id, create_user_id,
                  create_timestamp, update_app_id, update_user_id, update_timestamp)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
`

type CreateRoleParams struct {
	RoleID          uuid.UUID
	RoleExtlID      string
	RoleCd          string
	RoleDescription string
	Active          bool
	CreateAppID     uuid.UUID
	CreateUserID    uuid.NullUUID
	CreateTimestamp time.Time
	UpdateAppID     uuid.UUID
	UpdateUserID    uuid.NullUUID
	UpdateTimestamp time.Time
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (int64, error) {
	result, err := q.db.Exec(ctx, createRole,
		arg.RoleID,
		arg.RoleExtlID,
		arg.RoleCd,
		arg.RoleDescription,
		arg.Active,
		arg.CreateAppID,
		arg.CreateUserID,
		arg.CreateTimestamp,
		arg.UpdateAppID,
		arg.UpdateUserID,
		arg.UpdateTimestamp,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const createRolePermission = `-- name: CreateRolePermission :execrows
insert into role_permission (role_id, permission_id, create_app_id, create_user_id, create_timestamp, update_app_id, update_user_id, update_timestamp)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
`

type CreateRolePermissionParams struct {
	RoleID          uuid.UUID
	PermissionID    uuid.UUID
	CreateAppID     uuid.UUID
	CreateUserID    uuid.NullUUID
	CreateTimestamp time.Time
	UpdateAppID     uuid.UUID
	UpdateUserID    uuid.NullUUID
	UpdateTimestamp time.Time
}

func (q *Queries) CreateRolePermission(ctx context.Context, arg CreateRolePermissionParams) (int64, error) {
	result, err := q.db.Exec(ctx, createRolePermission,
		arg.RoleID,
		arg.PermissionID,
		arg.CreateAppID,
		arg.CreateUserID,
		arg.CreateTimestamp,
		arg.UpdateAppID,
		arg.UpdateUserID,
		arg.UpdateTimestamp,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const createRoleUser = `-- name: CreateRoleUser :execrows
insert into role_user (role_id, user_id, create_app_id, create_user_id, create_timestamp, update_app_id, update_user_id, update_timestamp)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
`

type CreateRoleUserParams struct {
	RoleID          uuid.UUID
	UserID          uuid.UUID
	CreateAppID     uuid.UUID
	CreateUserID    uuid.NullUUID
	CreateTimestamp time.Time
	UpdateAppID     uuid.UUID
	UpdateUserID    uuid.NullUUID
	UpdateTimestamp time.Time
}

func (q *Queries) CreateRoleUser(ctx context.Context, arg CreateRoleUserParams) (int64, error) {
	result, err := q.db.Exec(ctx, createRoleUser,
		arg.RoleID,
		arg.UserID,
		arg.CreateAppID,
		arg.CreateUserID,
		arg.CreateTimestamp,
		arg.UpdateAppID,
		arg.UpdateUserID,
		arg.UpdateTimestamp,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const findAllPermissions = `-- name: FindAllPermissions :many
select permission_id, permission_extl_id, resource, operation, permission_description, active, create_app_id, create_user_id, create_timestamp, update_app_id, update_user_id, update_timestamp
from permission
`

func (q *Queries) FindAllPermissions(ctx context.Context) ([]Permission, error) {
	rows, err := q.db.Query(ctx, findAllPermissions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Permission
	for rows.Next() {
		var i Permission
		if err := rows.Scan(
			&i.PermissionID,
			&i.PermissionExtlID,
			&i.Resource,
			&i.Operation,
			&i.PermissionDescription,
			&i.Active,
			&i.CreateAppID,
			&i.CreateUserID,
			&i.CreateTimestamp,
			&i.UpdateAppID,
			&i.UpdateUserID,
			&i.UpdateTimestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findPermissionByExternalID = `-- name: FindPermissionByExternalID :one
SELECT permission_id, permission_extl_id, resource, operation, permission_description, active, create_app_id, create_user_id, create_timestamp, update_app_id, update_user_id, update_timestamp
FROM permission
WHERE permission_extl_id = $1
`

func (q *Queries) FindPermissionByExternalID(ctx context.Context, permissionExtlID string) (Permission, error) {
	row := q.db.QueryRow(ctx, findPermissionByExternalID, permissionExtlID)
	var i Permission
	err := row.Scan(
		&i.PermissionID,
		&i.PermissionExtlID,
		&i.Resource,
		&i.Operation,
		&i.PermissionDescription,
		&i.Active,
		&i.CreateAppID,
		&i.CreateUserID,
		&i.CreateTimestamp,
		&i.UpdateAppID,
		&i.UpdateUserID,
		&i.UpdateTimestamp,
	)
	return i, err
}

const findPermissionByResourceOperation = `-- name: FindPermissionByResourceOperation :one
SELECT permission_id, permission_extl_id, resource, operation, permission_description, active, create_app_id, create_user_id, create_timestamp, update_app_id, update_user_id, update_timestamp
FROM permission
WHERE resource = $1
  AND operation = $2
`

type FindPermissionByResourceOperationParams struct {
	Resource  string
	Operation string
}

func (q *Queries) FindPermissionByResourceOperation(ctx context.Context, arg FindPermissionByResourceOperationParams) (Permission, error) {
	row := q.db.QueryRow(ctx, findPermissionByResourceOperation, arg.Resource, arg.Operation)
	var i Permission
	err := row.Scan(
		&i.PermissionID,
		&i.PermissionExtlID,
		&i.Resource,
		&i.Operation,
		&i.PermissionDescription,
		&i.Active,
		&i.CreateAppID,
		&i.CreateUserID,
		&i.CreateTimestamp,
		&i.UpdateAppID,
		&i.UpdateUserID,
		&i.UpdateTimestamp,
	)
	return i, err
}

const isAuthorized = `-- name: IsAuthorized :one
SELECT ru.user_id
FROM role_user ru
         INNER JOIN role_permission rp on rp.role_id = ru.role_id
         INNER JOIN permission p on p.permission_id = rp.permission_id
WHERE p.active = true
  AND p.resource = $1
  AND p.operation = $2
  AND ru.user_id = $3
`

type IsAuthorizedParams struct {
	Resource  string
	Operation string
	UserID    uuid.UUID
}

func (q *Queries) IsAuthorized(ctx context.Context, arg IsAuthorizedParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, isAuthorized, arg.Resource, arg.Operation, arg.UserID)
	var user_id uuid.UUID
	err := row.Scan(&user_id)
	return user_id, err
}
