// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package personstore

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createPerson = `-- name: CreatePerson :execrows
INSERT INTO person (person_id, org_id, create_app_id, create_user_id,
                    create_timestamp, update_app_id, update_user_id, update_timestamp)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
`

type CreatePersonParams struct {
	PersonID        uuid.UUID
	OrgID           uuid.UUID
	CreateAppID     uuid.UUID
	CreateUserID    uuid.NullUUID
	CreateTimestamp time.Time
	UpdateAppID     uuid.UUID
	UpdateUserID    uuid.NullUUID
	UpdateTimestamp time.Time
}

func (q *Queries) CreatePerson(ctx context.Context, arg CreatePersonParams) (int64, error) {
	result, err := q.db.Exec(ctx, createPerson,
		arg.PersonID,
		arg.OrgID,
		arg.CreateAppID,
		arg.CreateUserID,
		arg.CreateTimestamp,
		arg.UpdateAppID,
		arg.UpdateUserID,
		arg.UpdateTimestamp,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const createPersonProfile = `-- name: CreatePersonProfile :execrows
INSERT INTO person_profile (person_profile_id, person_id, name_prefix, first_name, middle_name, last_name, name_suffix,
                            nickname, company_name, company_dept, job_title, birth_date, birth_year, birth_month,
                            birth_day, language_id,
                            create_app_id, create_user_id, create_timestamp, update_app_id,
                            update_user_id, update_timestamp)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22)
`

type CreatePersonProfileParams struct {
	PersonProfileID uuid.UUID
	PersonID        uuid.UUID
	NamePrefix      sql.NullString
	FirstName       string
	MiddleName      sql.NullString
	LastName        string
	NameSuffix      sql.NullString
	Nickname        sql.NullString
	CompanyName     sql.NullString
	CompanyDept     sql.NullString
	JobTitle        sql.NullString
	BirthDate       sql.NullTime
	BirthYear       sql.NullInt64
	BirthMonth      sql.NullInt64
	BirthDay        sql.NullInt64
	LanguageID      uuid.NullUUID
	CreateAppID     uuid.UUID
	CreateUserID    uuid.NullUUID
	CreateTimestamp time.Time
	UpdateAppID     uuid.UUID
	UpdateUserID    uuid.NullUUID
	UpdateTimestamp time.Time
}

func (q *Queries) CreatePersonProfile(ctx context.Context, arg CreatePersonProfileParams) (int64, error) {
	result, err := q.db.Exec(ctx, createPersonProfile,
		arg.PersonProfileID,
		arg.PersonID,
		arg.NamePrefix,
		arg.FirstName,
		arg.MiddleName,
		arg.LastName,
		arg.NameSuffix,
		arg.Nickname,
		arg.CompanyName,
		arg.CompanyDept,
		arg.JobTitle,
		arg.BirthDate,
		arg.BirthYear,
		arg.BirthMonth,
		arg.BirthDay,
		arg.LanguageID,
		arg.CreateAppID,
		arg.CreateUserID,
		arg.CreateTimestamp,
		arg.UpdateAppID,
		arg.UpdateUserID,
		arg.UpdateTimestamp,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const deletePersonProfile = `-- name: DeletePersonProfile :execrows
DELETE FROM person_profile
WHERE person_id = $1
`

func (q *Queries) DeletePersonProfile(ctx context.Context, personID uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deletePersonProfile, personID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const findPersonProfileByID = `-- name: FindPersonProfileByID :one
SELECT person_profile_id, person_id, name_prefix, first_name, middle_name, last_name, name_suffix, nickname, company_name, company_dept, job_title, birth_date, birth_year, birth_month, birth_day, language_id, create_app_id, create_user_id, create_timestamp, update_app_id, update_user_id, update_timestamp FROM person_profile
WHERE person_id = $1 LIMIT 1
`

func (q *Queries) FindPersonProfileByID(ctx context.Context, personID uuid.UUID) (PersonProfile, error) {
	row := q.db.QueryRow(ctx, findPersonProfileByID, personID)
	var i PersonProfile
	err := row.Scan(
		&i.PersonProfileID,
		&i.PersonID,
		&i.NamePrefix,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.NameSuffix,
		&i.Nickname,
		&i.CompanyName,
		&i.CompanyDept,
		&i.JobTitle,
		&i.BirthDate,
		&i.BirthYear,
		&i.BirthMonth,
		&i.BirthDay,
		&i.LanguageID,
		&i.CreateAppID,
		&i.CreateUserID,
		&i.CreateTimestamp,
		&i.UpdateAppID,
		&i.UpdateUserID,
		&i.UpdateTimestamp,
	)
	return i, err
}
